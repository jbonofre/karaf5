"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[471],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>m});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=r.createContext({}),c=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=c(e.components);return r.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=n,v=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(v,o(o({ref:a},p),{},{components:t})):r.createElement(v,o({ref:a},p))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1851:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(7462),n=(t(7294),t(3905));const i={},o="Services & registry",l={unversionedId:"services",id:"services",title:"Services & registry",description:"K5 registry and services are the core of the runtime. Services provided additional features in your runtime, like supporting loading appliccations, starting a HTTP container, etc.",source:"@site/docs/04-services.md",sourceDirName:".",slug:"/services",permalink:"/karaf5/docs/services",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/karaf5/docs/architecture"},next:{title:"Tools",permalink:"/karaf5/docs/tools"}},s={},c=[{value:"K5 service",id:"k5-service",level:2},{value:"K5 registry &amp; loading services",id:"k5-registry--loading-services",level:2},{value:"Core services",id:"core-services",level:2},{value:"Configuration service",id:"configuration-service",level:3},{value:"Lifecycle service",id:"lifecycle-service",level:3},{value:"Classloader service",id:"classloader-service",level:3},{value:"Module services",id:"module-services",level:2},{value:"Banner",id:"banner",level:3},{value:"Camel",id:"camel",level:3},{value:"Classpath",id:"classpath",level:3},{value:"Configuration JSON",id:"configuration-json",level:3},{value:"Configuration Properties",id:"configuration-properties",level:3},{value:"Extractor",id:"extractor",level:3},{value:"HTTP",id:"http",level:3},{value:"JPA",id:"jpa",level:3},{value:"OSGi module manager",id:"osgi-module-manager",level:3},{value:"REST",id:"rest",level:3},{value:"Spring Boot module manager",id:"spring-boot-module-manager",level:3},{value:"Create a service",id:"create-a-service",level:2}],p={toc:c};function u(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"services--registry"},"Services & registry"),(0,n.kt)("p",null,"K5 registry and services are the core of the runtime. Services provided additional features in your runtime, like supporting loading appliccations, starting a HTTP container, etc."),(0,n.kt)("p",null,"Basically, a runtime is modules loader, easy module register services in the K5 service registry."),(0,n.kt)("h2",{id:"k5-service"},"K5 service"),(0,n.kt)("p",null,'A service is a "classic" Java SPI: a service is described by a Java interface.'),(0,n.kt)("p",null,"Any module in a K5 runtime can use and register services."),(0,n.kt)("p",null,"A service can:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"have a name (default is class simple name)"),(0,n.kt)("li",{parentName:"ul"},"have a priority (if you want to define an order between services or defining a kind of starting stages by grouping services).")),(0,n.kt)("h2",{id:"k5-registry--loading-services"},"K5 registry & loading services"),(0,n.kt)("p",null,"The K5 Service Registry stores any K5 services. The registry is basically a ",(0,n.kt)("inlineCode",{parentName:"p"},"Map<Class<?>, Service>"),"."),(0,n.kt)("p",null,'It automatically loads K5 services: the services loading can be "ordered" by priority in the registry.'),(0,n.kt)("p",null,"K5 Service Registry is unique in a runtime and shared by any services/applications present in the runtime."),(0,n.kt)("p",null,"The K5 service registration give you access to the Service Registry, and you can interact with it. You also have util method to get the K5 Service Registry without registrering a service."),(0,n.kt)("p",null,"Once you have the Service Registry, you can:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"get any service from the registry (including the K5 core services)"),(0,n.kt)("li",{parentName:"ul"},"get all services from a certain type (interface)"),(0,n.kt)("li",{parentName:"ul"},"registry your own services"),(0,n.kt)("li",{parentName:"ul"},"unregister any service")),(0,n.kt)("p",null,"K5 Service Registry service class is ",(0,n.kt)("inlineCode",{parentName:"p"},"org.apache.karaf.boot.service.ServiceRegistry"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"public class ServiceRegistry implements AutoCloseable {\n\n  /**\n   * Retrieve all services from the registry.\n   *\n   * @return all services from the registry.\n   */\n  public Map<Class<?>, Service> getAll() { ... }\n\n    /**\n     * Retrieve a service from the registry.\n     *\n     * @param serviceClass the service class identifying the service.\n     * @param <T>          the service type.\n     * @return the service instance from the registry.\n     */\n    public <T> T get(final Class<T> serviceClass) { ... }\n\n    /**\n     * Lookup a stream of service by type.\n     *\n     * @param serviceClass looked up type.\n     * @param <T>          expected type.\n     * @return the instances matching the requested type.\n     */\n    public <T> Stream<Service> findByType(final Class<T> serviceClass) { ... }\n\n    /**\n     * Register a service in the registry.\n     *\n     * @param service the service to add in the registry.\n     * @return true if the service has been added, false else.\n     */\n    public boolean add(final Service service) { ... }\n\n    /**\n     * Remove a service from the registry.\n     *\n     * @param service the service to remove.\n     */\n    public void remove(final Service service) { ... }\n\n    /**\n     * Close (stop) the service registry.\n     */\n    @Override\n    public void close() { ... }\n\n    /**\n     * Start the service registry.\n     */\n    public void start() { ... }\n    \n\n}\n")),(0,n.kt)("p",null,"K5 Service Registry is itself a K5 service."),(0,n.kt)("h2",{id:"core-services"},"Core services"),(0,n.kt)("p",null,"Any K5 runtime includes karaf-boot module (runtime core). Karaf Boot provides the core services, provided out of the box for you, available in the service registry."),(0,n.kt)("h3",{id:"configuration-service"},"Configuration service"),(0,n.kt)("p",null,"The configuration service is the main configuration store for the runtime itself, but can also be used by the modules to store their own configurations."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"KarafConfigService")," provides access to the ",(0,n.kt)("inlineCode",{parentName:"p"},"KarafConfig")," resources:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Properties")," is key/value pair where you can store anything. These properties can be populated by system properties or environment variables."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Profiles")," store libaries that you want to share accross several modules in the runtime."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("em",{parentName:"li"},"Applications")," define the properties of your applications modules.")),(0,n.kt)("p",null,"You can interact with the K5 configuration service programmatically, but you can also populate the configuration via other K5 services, like K5 JSON Configuration or K5 Properties Configuration services. You can also create your own service to populate and interact with the core K5 configuration service."),(0,n.kt)("h3",{id:"lifecycle-service"},"Lifecycle service"),(0,n.kt)("p",null,'K5 Lifecycle service allows you to "hook" your own services into the runtime lifecycle. It allows to call service method during runtime start and stop.'),(0,n.kt)("p",null,"The lifecycle service is registered in the K5 service registry, it means that starting the service registry is actually starting the lifecycle service."),(0,n.kt)("p",null,"You basically have two callback hooks you can create in your service:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"calling one of your service method when the service is registered in the service registry. For that, you just have to implement ",(0,n.kt)("inlineCode",{parentName:"li"},"onRegister(ServiceRegistry serviceRegistry)")," method in your service:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"public void onRegister(ServiceRegistry serviceRegistry) {\n  ...\n}\n"))),(0,n.kt)("li",{parentName:"ul"},"once you have the ",(0,n.kt)("inlineCode",{parentName:"li"},"ServiceRegistry"),", you can add your service methods in the ",(0,n.kt)("inlineCode",{parentName:"li"},"KarafLifeCycleService"),", in the ",(0,n.kt)("inlineCode",{parentName:"li"},"onStart()")," and/or ",(0,n.kt)("inlineCode",{parentName:"li"},"onShutdown()")," phases:",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-java"},"KarafLifeCycleService karafLifeCycleService = serviceRegistry.get(KarafLifeCycleService.class);\nkarafLifeCycleService.onStart(() -> {\n  // start\n});\nkarafLifeCycleService.onShutdown(() -> {\n  // shutdow \n});\n")))),(0,n.kt)("p",null,"The runtime start cinetic is:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Load and register all services"),(0,n.kt)("li",{parentName:"ol"},"Once all services are registered (all ",(0,n.kt)("inlineCode",{parentName:"li"},"onRegister()")," methods executed), then, the ",(0,n.kt)("inlineCode",{parentName:"li"},"KarafLifeCycleService#start()")," method is executed, calling all methods registered ",(0,n.kt)("inlineCode",{parentName:"li"},"onStart()"),".")),(0,n.kt)("p",null,"On the other hand, the runtime shutdown cinetic is:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"execute ",(0,n.kt)("inlineCode",{parentName:"li"},"KarafLifeCycleService#close()")," method, calling all methods registered ",(0,n.kt)("inlineCode",{parentName:"li"},"onShutdown()"),".")),(0,n.kt)("h3",{id:"classloader-service"},"Classloader service"),(0,n.kt)("h2",{id:"module-services"},"Module services"),(0,n.kt)("p",null,'K5 also provides additional services that you can use "out of the box" to easily create your own services.'),(0,n.kt)("p",null,"You don't have to implement everything, K5 services help you. Loading and using these services is very simple: just add the services in your dependencies (for instance in your Maven ",(0,n.kt)("inlineCode",{parentName:"p"},"pom.xml")," dependencies) and in the runtime."),(0,n.kt)("h3",{id:"banner"},"Banner"),(0,n.kt)("p",null,"Banner service just display a fancy message when the runtime start."),(0,n.kt)("p",null,"You can customize the message using the ",(0,n.kt)("inlineCode",{parentName:"p"},"KARAF_BANNER")," environment variable or ",(0,n.kt)("inlineCode",{parentName:"p"},"karaf.banner")," system property."),(0,n.kt)("p",null,"For instance, here's a ",(0,n.kt)("inlineCode",{parentName:"p"},"karaf-build.json")," to add the Banner Service in a runtime:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "my-runtime",\n  "properties": {},\n  "dependencies": [\n    "k5:karaf-boot", "k5:banner"\n  ]\n}\n')),(0,n.kt)("p",null,"If we start ",(0,n.kt)("inlineCode",{parentName:"p"},"my-runtime"),", you can see the startup message:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ java -jar karaf-boot-5.0-SNAPSHOT.jar\noct. 02, 2022 12:05:25 PM org.apache.karaf.boot.Main main\nINFOS: Starting runtime in exploded mode\nKaraf lib: /Users/jbonofre/test/my-runtime\noct. 02, 2022 12:05:25 PM org.apache.karaf.boot.service.ServiceRegistry add\nINFOS: Adding config service (-2147483647)\noct. 02, 2022 12:05:25 PM org.apache.karaf.boot.service.ServiceRegistry add\nINFOS: Adding lifecycle service (-1000)\noct. 02, 2022 12:05:25 PM org.apache.karaf.boot.service.ServiceRegistry add\nINFOS: Adding classloader-service service (-1000)\noct. 02, 2022 12:05:25 PM org.apache.karaf.boot.service.ServiceRegistry add\nINFOS: Adding karaf-banner service (2147483647)\noct. 02, 2022 12:05:25 PM org.apache.karaf.banner.WelcomeBannerService onRegister\nINFOS:\n        __ __                  ____\n       / //_/____ __________ _/ __/\n      / ,<  / __ `/ ___/ __ `/ /_\n     / /| |/ /_/ / /  / /_/ / __/\n    /_/ |_|\\__,_/_/   \\__,_/_/\n\n  Apache Karaf 5.x\n\noct. 02, 2022 12:05:25 PM org.apache.karaf.boot.service.ServiceRegistry lambda$start$2\nINFOS: Starting services\noct. 02, 2022 12:05:25 PM org.apache.karaf.boot.service.KarafLifeCycleService start\nINFOS: Starting lifecycle service\n")),(0,n.kt)("p",null,"Now, we can try to change the message by settings the ",(0,n.kt)("inlineCode",{parentName:"p"},"KARAF_BANNER")," environment variable:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'$ export KARAF_BANNER="Hello K5"\n')),(0,n.kt)("p",null,"and we can see now our message when launching ",(0,n.kt)("inlineCode",{parentName:"p"},"my-runtime"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ java -jar karaf-boot-5.0-SNAPSHOT.jar\noct. 02, 2022 12:07:58 PM org.apache.karaf.boot.Main main\nINFOS: Starting runtime in exploded mode\nKaraf lib: /Users/jbonofre/test/my-runtime\noct. 02, 2022 12:07:58 PM org.apache.karaf.boot.service.ServiceRegistry add\nINFOS: Adding config service (-2147483647)\noct. 02, 2022 12:07:58 PM org.apache.karaf.boot.service.ServiceRegistry add\nINFOS: Adding lifecycle service (-1000)\noct. 02, 2022 12:07:58 PM org.apache.karaf.boot.service.ServiceRegistry add\nINFOS: Adding classloader-service service (-1000)\noct. 02, 2022 12:07:58 PM org.apache.karaf.boot.service.ServiceRegistry add\nINFOS: Adding karaf-banner service (2147483647)\noct. 02, 2022 12:07:58 PM org.apache.karaf.banner.WelcomeBannerService onRegister\nINFOS: Welcome K5\noct. 02, 2022 12:07:58 PM org.apache.karaf.boot.service.ServiceRegistry lambda$start$2\nINFOS: Starting services\noct. 02, 2022 12:07:58 PM org.apache.karaf.boot.service.KarafLifeCycleService start\nINFOS: Starting lifecycle service\n")),(0,n.kt)("h3",{id:"camel"},"Camel"),(0,n.kt)("p",null,"You want to run ",(0,n.kt)("a",{parentName:"p",href:"https://camel.apache.org"},"Apache Camel")," routes in your K5 runtime, K5 Camel service can help you."),(0,n.kt)("p",null,"The K5 Camel service automatically creates a ",(0,n.kt)("inlineCode",{parentName:"p"},"CamelContext")," for you. Then, you can directly create the Camel routes as K5 service and they will be automatically added to the ",(0,n.kt)("inlineCode",{parentName:"p"},"CamelContext"),"."),(0,n.kt)("p",null,"For instance, your Camel route service can look like:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'public class MyRouteBuilder extends RouteBuilder implements Service {\n\n    @Override\n    public String name() {\n        return "test-route";\n    }\n\n    @Override\n    public void configure() throws Exception {\n        from("direct:test").id(name()).to("log:test").to("mock:test");\n    }\n\n}\n')),(0,n.kt)("p",null,'Don\'t worry about the version, the K5 service modules provide all "verified" dependencies running in K5. For instance, if you use Apache Maven, you just need these dependencies:'),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>my.group.id</groupId>\n    <artifactId>my-route</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.apache.karaf</groupId>\n            <artifactId>karaf-boot</artifactId>\n            <version>5.0-SNAPSHOT</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.karaf</groupId>\n            <artifactId>karaf-camel</artifactId>\n            <version>5.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>11</source>\n                    <target>11</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n')),(0,n.kt)("p",null,"Using Apache Maven, just build your route project with ",(0,n.kt)("inlineCode",{parentName:"p"},"mvn clean install"),"."),(0,n.kt)("p",null,"Now, you can create the following ",(0,n.kt)("inlineCode",{parentName:"p"},"karaf-build.json"),", optionally overriding Camel dependencies: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "my-runtime",\n  "properties": {\n    "include.transitive": "true"\n  },\n  "dependencies": [\n    "k5:boot",\n    "k5:camel",\n    "mvn:org.apache.camel/camel-core/3.17.0",\n    "mvn:my.group.id/my-route/1.0-SNAPSHOT"\n  ]\n}\n')),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Instead of using ",(0,n.kt)("inlineCode",{parentName:"em"},"karaf-build")," CLI, you can also use directly the ",(0,n.kt)("inlineCode",{parentName:"em"},"karaf-maven-plugin")," to easily create the runtime based on your Maven project.")),(0,n.kt)("p",null,"When we launch ",(0,n.kt)("inlineCode",{parentName:"p"},"my-runtime"),", we can see the Camel route started:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"$ java -jar karaf-boot-5.0-SNAPSHOT.jar\n2022-10-02 18:46:01.774343000 INFO [ org.apache.karaf.boot.service.ServiceRegistry add ] : Adding config service (-2147483647)\n2022-10-02 18:46:01.812901000 INFO [ org.apache.karaf.boot.service.ServiceRegistry add ] : Adding lifecycle service (-1000)\n2022-10-02 18:46:01.813346000 INFO [ org.apache.karaf.boot.service.ServiceRegistry add ] : Adding test-route service (1000)\n2022-10-02 18:46:01.813705000 INFO [ org.apache.karaf.boot.service.ServiceRegistry add ] : Adding karaf-camel service (1001)\n2022-10-02 18:46:01.814024000 INFO [ org.apache.karaf.camel.CamelService onRegister ] : Creating default CamelContext\n2022-10-02 18:46:01.934149000 INFO [ org.apache.karaf.camel.CamelService onRegister ] : Looking for RouteBuilder in the registry\n2022-10-02 18:46:01.975948000 INFO [ org.apache.karaf.boot.service.ServiceRegistry lambda$start$2 ] : Starting services\n2022-10-02 18:46:01.976382000 INFO [ org.apache.karaf.boot.service.KarafLifeCycleService start ] : Starting lifecycle service\n2022-10-02 18:46:02.140007000 INFO [ org.apache.camel.impl.engine.AbstractCamelContext doStartContext ] : Apache Camel 3.17.0 (default-camel-context) is starting\n2022-10-02 18:46:02.163201000 INFO [ org.apache.camel.impl.engine.AbstractCamelContext logStartSummary ] : Routes startup (total:1 started:1)\n2022-10-02 18:46:02.163682000 INFO [ org.apache.camel.impl.engine.AbstractCamelContext logStartSummary ] :     Started test-route (direct://test)\n2022-10-02 18:46:02.164197000 INFO [ org.apache.camel.impl.engine.AbstractCamelContext logStartSummary ] : Apache Camel 3.17.0 (default-camel-context) started in 245ms (build:60ms init:161ms start:24ms)\n2022-10-02 18:46:02.190766000 INFO [ org.apache.camel.spi.CamelLogger log ] : Exchange[ExchangePattern: InOnly, BodyType: String, Body: Hello K5!]\n2022-10-02 18:46:02.196397000 INFO [ org.apache.camel.component.mock.MockEndpoint assertIsSatisfied ] : Asserting: mock://test is satisfied\n2022-10-02 18:46:02.196985000 INFO [ org.apache.karaf.boot.service.ServiceRegistry close ] : Closing service registry\n2022-10-02 18:46:02.198728000 INFO [ org.apache.karaf.boot.service.KarafLifeCycleService close ] : Stopping lifecycle service\n2022-10-02 18:46:02.200030000 INFO [ org.apache.camel.impl.engine.AbstractCamelContext doStop ] : Apache Camel 3.17.0 (default-camel-context) shutting down (timeout:45s)\n2022-10-02 18:46:02.221227000 INFO [ org.apache.camel.spi.CamelLogger log ] : Routes stopped (total:1 stopped:1)\n2022-10-02 18:46:02.221589000 INFO [ org.apache.camel.spi.CamelLogger log ] :     Stopped test-route (direct://test)\n2022-10-02 18:46:02.224676000 INFO [ org.apache.camel.impl.engine.AbstractCamelContext doStop ] : Apache Camel 3.17.0 (default-camel-context) shutdown in 25ms (uptime:84ms)\n")),(0,n.kt)("h3",{id:"classpath"},"Classpath"),(0,n.kt)("p",null,"K5 Classpath service provides a protocol handler allowing you to use ",(0,n.kt)("inlineCode",{parentName:"p"},"classpath:")," protocol in your modules."),(0,n.kt)("p",null,"You just need to have ",(0,n.kt)("inlineCode",{parentName:"p"},"k5:karaf-classpath")," service in your ",(0,n.kt)("inlineCode",{parentName:"p"},"karaf-build.json")," ",(0,n.kt)("inlineCode",{parentName:"p"},"dependencies"),"."),(0,n.kt)("h3",{id:"configuration-json"},"Configuration JSON"),(0,n.kt)("p",null,"K5 Configuration JSON allows you to populate the K5 Configuration Service using a JSON file."),(0,n.kt)("p",null,"As soon as you add ",(0,n.kt)("inlineCode",{parentName:"p"},"k5:karaf-config-json")," module in your runtime, you can also include a ",(0,n.kt)("inlineCode",{parentName:"p"},"karaf.json")," file."),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"You can also define the location of the ",(0,n.kt)("inlineCode",{parentName:"em"},"karaf.json")," file using ",(0,n.kt)("inlineCode",{parentName:"em"},"KARAF_CONFIG")," environment variable or ",(0,n.kt)("inlineCode",{parentName:"em"},"karaf.config")," system property.")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"karaf.json")," populates the ",(0,n.kt)("inlineCode",{parentName:"p"},"KarafConfigService"),", with ",(0,n.kt)("inlineCode",{parentName:"p"},"properties"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"profiles"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"applications"),". For instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "properties": {\n    "foo": "bar",\n    "lifecycle.enabled": "true",\n    "log.patternLayout": "%m %n",\n  },\n  "profiles": [\n    {\n      "name": "myprofile",\n      "properties": {\n        "foo": "bar"\n      },\n      "urls": [ "/path/to/jar/file.jar", "/path/to/folder" ]\n    }\n  ],\n  "applications": [\n    {\n      "name": "spring-boot-foo",\n      "version": "1.0-SNAPSHOT",\n      "url": "/path/to/app/spring-boot.jar",\n      "profile": "myprofile",\n      "type": "spring-boot",\n      "properties": {\n        "enableHttp": "true",\n        "enablePrometheus": "true"\n      }\n    },\n    {\n      "name": "bundle-bar",\n      "url": "/path/to/osgi/bundle.jar",\n      "type": "osgi"\n    }\n  ]\n}\n')),(0,n.kt)("h3",{id:"configuration-properties"},"Configuration Properties"),(0,n.kt)("p",null,"K5 Configuration Properties allows you to populate the K5 Configuration Service using a Properties file."),(0,n.kt)("p",null,"As soon as you add ",(0,n.kt)("inlineCode",{parentName:"p"},"k5:karaf-config-properties")," module in your runtime, you can also include a ",(0,n.kt)("inlineCode",{parentName:"p"},"karaf.properties")," file."),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"You can also define the location of the ",(0,n.kt)("inlineCode",{parentName:"em"},"karaf.properties")," file using ",(0,n.kt)("inlineCode",{parentName:"em"},"KARAF_CONFIG")," environment variable or ",(0,n.kt)("inlineCode",{parentName:"em"},"karaf.config")," system property.")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"karaf.properties")," populates the ",(0,n.kt)("inlineCode",{parentName:"p"},"KarafConfigService"),", with ",(0,n.kt)("inlineCode",{parentName:"p"},"properties"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"profiles"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"applications"),". For instance:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-properties"},"\n=bar\nlifecycle.enabled=true\nlog.patternLayout=%m %n\n\napplication.app1.url=/path/to/app/spring-boot.jar\napplication.app1.profiles=myprofile\napplication.app1.type=spring-boot\napplication.app1.enableHttp=true\napplication.app1.enablePrometheus=true\n\napplication.app2.url=/path/to/osgi/bundle.jar\napplication.app2.type=osgi\n")),(0,n.kt)("h3",{id:"extractor"},"Extractor"),(0,n.kt)("h3",{id:"http"},"HTTP"),(0,n.kt)("h3",{id:"jpa"},"JPA"),(0,n.kt)("h3",{id:"osgi-module-manager"},"OSGi module manager"),(0,n.kt)("h3",{id:"rest"},"REST"),(0,n.kt)("h3",{id:"spring-boot-module-manager"},"Spring Boot module manager"),(0,n.kt)("h2",{id:"create-a-service"},"Create a service"))}u.isMDXComponent=!0}}]);